library(CellChat)
library(ggplot2)
library(ggalluvial)
library(svglite)
library(Seurat)
library(SeuratData)
library(Matrix)
options(stringsAsFactors = FALSE)
library(dplyr)
library(Seurat)
setwd("C:/Users/0.0/Desktop")
# 使用Read10X函数读取矩阵数据，得到一个稀疏矩阵
pbmc.data <- Read10X(data.dir = "1011")
# 使用CreateSeuratObject函数创建Seurat对象，这里要求细胞中基因数目不能小于200，且基因至少在三个细胞中有表达，否则过滤掉
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)



setwd("C:/Users/0.0/Desktop")
TPM <- read.table("108.txt",header = T)
rownames(TPM)=TPM[,1]
TPM=TPM[,-c(1:6)]
TPM <- as.matrix(TPM)
TPM <- as(TPM, "sparseMatrix")
data.object <- CreateSeuratObject(counts = TPM, project = "test", min.cells = 3, min.features = 200)

#########################################################


data.input  <- pbmc@assays$RNA@data
data.input2=data.object@assays$RNA@data

# identity = data.frame(group =pbmc$seurat_annotations, row.names = names(pbmc$seurat_annotations)) # create a dataframe consisting of the cell labels
# unique(identity$group) # check the cell labels

cellchat <- createCellChat(data = data.input)






















# Here we load a scRNA-seq data matrix and its associated cell meta data
load(url("https://ndownloader.figshare.com/files/25950872")) # This is a combined data from two biological conditions: normal and diseases
data.input = data_humanSkin$data # normalized data matrix
meta = data_humanSkin$meta # a dataframe with rownames containing cell mata data
cell.use = rownames(meta)[meta$condition == "LS"] # extract the cell names from disease data

# Prepare input data for CelChat analysis
data.input = data.input[, cell.use]
meta = meta[cell.use, ]
# meta = data.frame(labels = meta$labels[cell.use], row.names = colnames(data.input)) # manually create a dataframe consisting of the cell labels
unique(meta$labels) # check the cell labels





cellchat <- createCellChat(object = data.input, meta = meta, group.by = "labels")


CellChatDB <- CellChatDB.human # use CellChatDB.mouse if running on mouse data

dplyr::glimpse(CellChatDB$interaction)

CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") # use Secreted Signaling

cellchat@DB <- CellChatDB.use



cellchat <- subsetData(cellchat) # subset the expression data of signaling genes for saving computation cost
future::plan("multiprocess", workers = 4) # do parallel
#> Warning: [ONE-TIME WARNING] Forked processing ('multicore') is disabled
#> in future (>= 1.13.0) when running R from RStudio, because it is
#> considered unstable. Because of this, plan("multicore") will fall
#> back to plan("sequential"), and plan("multiprocess") will fall back to
#> plan("multisession") - not plan("multicore") as in the past. For more details,
#> how to control forked processing or not, and how to silence this warning in
#> future R sessions, see ?future::supportsMulticore
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- projectData(cellchat, PPI.human)





cellchat <- computeCommunProb(cellchat, raw.use = TRUE)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat <- filterCommunication(cellchat, min.cells = 10)
